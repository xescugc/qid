// Code generated by "enumer -type=Status -transform=snake -output=status_string.go -json"; DO NOT EDIT.

package build

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _StatusName = "succeededfailedstarted"

var _StatusIndex = [...]uint8{0, 9, 15, 22}

const _StatusLowerName = "succeededfailedstarted"

func (i Status) String() string {
	if i < 0 || i >= Status(len(_StatusIndex)-1) {
		return fmt.Sprintf("Status(%d)", i)
	}
	return _StatusName[_StatusIndex[i]:_StatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StatusNoOp() {
	var x [1]struct{}
	_ = x[Succeeded-(0)]
	_ = x[Failed-(1)]
	_ = x[Started-(2)]
}

var _StatusValues = []Status{Succeeded, Failed, Started}

var _StatusNameToValueMap = map[string]Status{
	_StatusName[0:9]:        Succeeded,
	_StatusLowerName[0:9]:   Succeeded,
	_StatusName[9:15]:       Failed,
	_StatusLowerName[9:15]:  Failed,
	_StatusName[15:22]:      Started,
	_StatusLowerName[15:22]: Started,
}

var _StatusNames = []string{
	_StatusName[0:9],
	_StatusName[9:15],
	_StatusName[15:22],
}

// StatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StatusString(s string) (Status, error) {
	if val, ok := _StatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Status values", s)
}

// StatusValues returns all values of the enum
func StatusValues() []Status {
	return _StatusValues
}

// StatusStrings returns a slice of all String values of the enum
func StatusStrings() []string {
	strs := make([]string, len(_StatusNames))
	copy(strs, _StatusNames)
	return strs
}

// IsAStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Status) IsAStatus() bool {
	for _, v := range _StatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Status
func (i Status) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Status
func (i *Status) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Status should be a string, got %s", data)
	}

	var err error
	*i, err = StatusString(s)
	return err
}
