// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/qid/qid/pipeline (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=../mock/pipeline_repository.go -mock_names=Repository=PipelineRepository -package mock github.com/xescugc/qid/qid/pipeline Repository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pipeline "github.com/xescugc/qid/qid/pipeline"
	gomock "go.uber.org/mock/gomock"
)

// PipelineRepository is a mock of Repository interface.
type PipelineRepository struct {
	ctrl     *gomock.Controller
	recorder *PipelineRepositoryMockRecorder
	isgomock struct{}
}

// PipelineRepositoryMockRecorder is the mock recorder for PipelineRepository.
type PipelineRepositoryMockRecorder struct {
	mock *PipelineRepository
}

// NewPipelineRepository creates a new mock instance.
func NewPipelineRepository(ctrl *gomock.Controller) *PipelineRepository {
	mock := &PipelineRepository{ctrl: ctrl}
	mock.recorder = &PipelineRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PipelineRepository) EXPECT() *PipelineRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *PipelineRepository) Create(ctx context.Context, pp pipeline.Pipeline) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pp)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *PipelineRepositoryMockRecorder) Create(ctx, pp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*PipelineRepository)(nil).Create), ctx, pp)
}

// Delete mocks base method.
func (m *PipelineRepository) Delete(ctx context.Context, pn string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, pn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *PipelineRepositoryMockRecorder) Delete(ctx, pn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*PipelineRepository)(nil).Delete), ctx, pn)
}

// Filter mocks base method.
func (m *PipelineRepository) Filter(ctx context.Context) ([]*pipeline.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx)
	ret0, _ := ret[0].([]*pipeline.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *PipelineRepositoryMockRecorder) Filter(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*PipelineRepository)(nil).Filter), ctx)
}

// Find mocks base method.
func (m *PipelineRepository) Find(ctx context.Context, pn string) (*pipeline.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, pn)
	ret0, _ := ret[0].(*pipeline.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *PipelineRepositoryMockRecorder) Find(ctx, pn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*PipelineRepository)(nil).Find), ctx, pn)
}

// Update mocks base method.
func (m *PipelineRepository) Update(ctx context.Context, ppn string, pp pipeline.Pipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, ppn, pp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *PipelineRepositoryMockRecorder) Update(ctx, ppn, pp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*PipelineRepository)(nil).Update), ctx, ppn, pp)
}
