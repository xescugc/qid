// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/qid/qid/job (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=../mock/job_repository.go -mock_names=Repository=JobRepository -package mock github.com/xescugc/qid/qid/job Repository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	job "github.com/xescugc/qid/qid/job"
	gomock "go.uber.org/mock/gomock"
)

// JobRepository is a mock of Repository interface.
type JobRepository struct {
	ctrl     *gomock.Controller
	recorder *JobRepositoryMockRecorder
	isgomock struct{}
}

// JobRepositoryMockRecorder is the mock recorder for JobRepository.
type JobRepositoryMockRecorder struct {
	mock *JobRepository
}

// NewJobRepository creates a new mock instance.
func NewJobRepository(ctrl *gomock.Controller) *JobRepository {
	mock := &JobRepository{ctrl: ctrl}
	mock.recorder = &JobRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *JobRepository) EXPECT() *JobRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *JobRepository) Create(ctx context.Context, pn string, j job.Job) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pn, j)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *JobRepositoryMockRecorder) Create(ctx, pn, j any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*JobRepository)(nil).Create), ctx, pn, j)
}

// Delete mocks base method.
func (m *JobRepository) Delete(ctx context.Context, pn, jn string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, pn, jn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *JobRepositoryMockRecorder) Delete(ctx, pn, jn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*JobRepository)(nil).Delete), ctx, pn, jn)
}

// Filter mocks base method.
func (m *JobRepository) Filter(ctx context.Context, pn string) ([]*job.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, pn)
	ret0, _ := ret[0].([]*job.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *JobRepositoryMockRecorder) Filter(ctx, pn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*JobRepository)(nil).Filter), ctx, pn)
}

// Find mocks base method.
func (m *JobRepository) Find(ctx context.Context, pn, jn string) (*job.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, pn, jn)
	ret0, _ := ret[0].(*job.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *JobRepositoryMockRecorder) Find(ctx, pn, jn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*JobRepository)(nil).Find), ctx, pn, jn)
}

// Update mocks base method.
func (m *JobRepository) Update(ctx context.Context, pn, jn string, j job.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, pn, jn, j)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *JobRepositoryMockRecorder) Update(ctx, pn, jn, j any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*JobRepository)(nil).Update), ctx, pn, jn, j)
}
