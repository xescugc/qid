// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/qid/qid/build (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=../mock/build_repository.go -mock_names=Repository=BuildRepository -package mock github.com/xescugc/qid/qid/build Repository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	build "github.com/xescugc/qid/qid/build"
	gomock "go.uber.org/mock/gomock"
)

// BuildRepository is a mock of Repository interface.
type BuildRepository struct {
	ctrl     *gomock.Controller
	recorder *BuildRepositoryMockRecorder
	isgomock struct{}
}

// BuildRepositoryMockRecorder is the mock recorder for BuildRepository.
type BuildRepositoryMockRecorder struct {
	mock *BuildRepository
}

// NewBuildRepository creates a new mock instance.
func NewBuildRepository(ctrl *gomock.Controller) *BuildRepository {
	mock := &BuildRepository{ctrl: ctrl}
	mock.recorder = &BuildRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *BuildRepository) EXPECT() *BuildRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *BuildRepository) Create(ctx context.Context, pn, jn string, b build.Build) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pn, jn, b)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *BuildRepositoryMockRecorder) Create(ctx, pn, jn, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*BuildRepository)(nil).Create), ctx, pn, jn, b)
}

// Filter mocks base method.
func (m *BuildRepository) Filter(ctx context.Context, pn, jn string) ([]*build.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, pn, jn)
	ret0, _ := ret[0].([]*build.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *BuildRepositoryMockRecorder) Filter(ctx, pn, jn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*BuildRepository)(nil).Filter), ctx, pn, jn)
}

// Find mocks base method.
func (m *BuildRepository) Find(ctx context.Context, pn, jn string, bID uint32) (*build.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, pn, jn, bID)
	ret0, _ := ret[0].(*build.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *BuildRepositoryMockRecorder) Find(ctx, pn, jn, bID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*BuildRepository)(nil).Find), ctx, pn, jn, bID)
}

// Update mocks base method.
func (m *BuildRepository) Update(ctx context.Context, pn, jn string, bID uint32, b build.Build) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, pn, jn, bID, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *BuildRepositoryMockRecorder) Update(ctx, pn, jn, bID, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*BuildRepository)(nil).Update), ctx, pn, jn, bID, b)
}
