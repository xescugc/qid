// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/qid/qid/resource (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=../mock/resource_repository.go -mock_names=Repository=ResourceRepository -package mock github.com/xescugc/qid/qid/resource Repository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	resource "github.com/xescugc/qid/qid/resource"
	gomock "go.uber.org/mock/gomock"
)

// ResourceRepository is a mock of Repository interface.
type ResourceRepository struct {
	ctrl     *gomock.Controller
	recorder *ResourceRepositoryMockRecorder
	isgomock struct{}
}

// ResourceRepositoryMockRecorder is the mock recorder for ResourceRepository.
type ResourceRepositoryMockRecorder struct {
	mock *ResourceRepository
}

// NewResourceRepository creates a new mock instance.
func NewResourceRepository(ctrl *gomock.Controller) *ResourceRepository {
	mock := &ResourceRepository{ctrl: ctrl}
	mock.recorder = &ResourceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ResourceRepository) EXPECT() *ResourceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *ResourceRepository) Create(ctx context.Context, pn string, r resource.Resource) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pn, r)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *ResourceRepositoryMockRecorder) Create(ctx, pn, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ResourceRepository)(nil).Create), ctx, pn, r)
}

// Filter mocks base method.
func (m *ResourceRepository) Filter(ctx context.Context, pn string) ([]*resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, pn)
	ret0, _ := ret[0].([]*resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *ResourceRepositoryMockRecorder) Filter(ctx, pn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*ResourceRepository)(nil).Filter), ctx, pn)
}

// Find mocks base method.
func (m *ResourceRepository) Find(ctx context.Context, pn, rn, rt string) (*resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, pn, rn, rt)
	ret0, _ := ret[0].(*resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *ResourceRepositoryMockRecorder) Find(ctx, pn, rn, rt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*ResourceRepository)(nil).Find), ctx, pn, rn, rt)
}
