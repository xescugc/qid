// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/qid/qid/queue (interfaces: Topic)
//
// Generated by this command:
//
//	mockgen -destination=../mock/topic.go -mock_names=Topic=Topic -package mock github.com/xescugc/qid/qid/queue Topic
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	pubsub "gocloud.dev/pubsub"
)

// Topic is a mock of Topic interface.
type Topic struct {
	ctrl     *gomock.Controller
	recorder *TopicMockRecorder
	isgomock struct{}
}

// TopicMockRecorder is the mock recorder for Topic.
type TopicMockRecorder struct {
	mock *Topic
}

// NewTopic creates a new mock instance.
func NewTopic(ctrl *gomock.Controller) *Topic {
	mock := &Topic{ctrl: ctrl}
	mock.recorder = &TopicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Topic) EXPECT() *TopicMockRecorder {
	return m.recorder
}

// As mocks base method.
func (m *Topic) As(i any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "As", i)
	ret0, _ := ret[0].(bool)
	return ret0
}

// As indicates an expected call of As.
func (mr *TopicMockRecorder) As(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "As", reflect.TypeOf((*Topic)(nil).As), i)
}

// ErrorAs mocks base method.
func (m *Topic) ErrorAs(err error, i any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorAs", err, i)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ErrorAs indicates an expected call of ErrorAs.
func (mr *TopicMockRecorder) ErrorAs(err, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorAs", reflect.TypeOf((*Topic)(nil).ErrorAs), err, i)
}

// Send mocks base method.
func (m_2 *Topic) Send(ctx context.Context, m *pubsub.Message) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Send", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *TopicMockRecorder) Send(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*Topic)(nil).Send), ctx, m)
}

// Shutdown mocks base method.
func (m *Topic) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *TopicMockRecorder) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*Topic)(nil).Shutdown), ctx)
}
