// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/qid/qid/restype (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=../mock/resource_type_repository.go -mock_names=Repository=ResourceTypeRepository -package mock github.com/xescugc/qid/qid/restype Repository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	restype "github.com/xescugc/qid/qid/restype"
	gomock "go.uber.org/mock/gomock"
)

// ResourceTypeRepository is a mock of Repository interface.
type ResourceTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *ResourceTypeRepositoryMockRecorder
	isgomock struct{}
}

// ResourceTypeRepositoryMockRecorder is the mock recorder for ResourceTypeRepository.
type ResourceTypeRepositoryMockRecorder struct {
	mock *ResourceTypeRepository
}

// NewResourceTypeRepository creates a new mock instance.
func NewResourceTypeRepository(ctrl *gomock.Controller) *ResourceTypeRepository {
	mock := &ResourceTypeRepository{ctrl: ctrl}
	mock.recorder = &ResourceTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ResourceTypeRepository) EXPECT() *ResourceTypeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *ResourceTypeRepository) Create(ctx context.Context, pn string, rt restype.ResourceType) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pn, rt)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *ResourceTypeRepositoryMockRecorder) Create(ctx, pn, rt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ResourceTypeRepository)(nil).Create), ctx, pn, rt)
}

// Delete mocks base method.
func (m *ResourceTypeRepository) Delete(ctx context.Context, pn, tn string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, pn, tn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *ResourceTypeRepositoryMockRecorder) Delete(ctx, pn, tn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ResourceTypeRepository)(nil).Delete), ctx, pn, tn)
}

// Filter mocks base method.
func (m *ResourceTypeRepository) Filter(ctx context.Context, pn string) ([]*restype.ResourceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, pn)
	ret0, _ := ret[0].([]*restype.ResourceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *ResourceTypeRepositoryMockRecorder) Filter(ctx, pn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*ResourceTypeRepository)(nil).Filter), ctx, pn)
}

// Find mocks base method.
func (m *ResourceTypeRepository) Find(ctx context.Context, pn, tn string) (*restype.ResourceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, pn, tn)
	ret0, _ := ret[0].(*restype.ResourceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *ResourceTypeRepositoryMockRecorder) Find(ctx, pn, tn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*ResourceTypeRepository)(nil).Find), ctx, pn, tn)
}

// Update mocks base method.
func (m *ResourceTypeRepository) Update(ctx context.Context, pn, tn string, rt restype.ResourceType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, pn, tn, rt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *ResourceTypeRepositoryMockRecorder) Update(ctx, pn, tn, rt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*ResourceTypeRepository)(nil).Update), ctx, pn, tn, rt)
}
