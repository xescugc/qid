// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/qid/qid/queue (interfaces: Queue)
//
// Generated by this command:
//
//	mockgen -destination=../mock/queue.go -mock_names=Queue=Queue -package mock github.com/xescugc/qid/qid/queue Queue
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Queue is a mock of Queue interface.
type Queue struct {
	ctrl     *gomock.Controller
	recorder *QueueMockRecorder
	isgomock struct{}
}

// QueueMockRecorder is the mock recorder for Queue.
type QueueMockRecorder struct {
	mock *Queue
}

// NewQueue creates a new mock instance.
func NewQueue(ctrl *gomock.Controller) *Queue {
	mock := &Queue{ctrl: ctrl}
	mock.recorder = &QueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Queue) EXPECT() *QueueMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *Queue) Push(ctx context.Context, q, t string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, q, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *QueueMockRecorder) Push(ctx, q, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*Queue)(nil).Push), ctx, q, t)
}
